"use client"; // Adicione essa linha no topo

import { useState } from 'react';
import Image from 'next/image';

export default function QuestionPage() {
  const [question, setQuestion] = useState('');
  const [response, setResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [evaluation, setEvaluation] = useState(5); // Nota inicial definida para 5
  const [showEvaluation, setShowEvaluation] = useState(false);
  const [showNewQuestionButton, setShowNewQuestionButton] = useState(false);

  // Atualiza a pergunta digitada
  const handleQuestionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setQuestion(e.target.value);
  };

  // Atualiza a avaliação
  const handleEvaluateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEvaluation(Number(e.target.value));
  };

  // Função para enviar a pergunta ao backend e processar a resposta
  const handleAskQuestion = async () => {
    setIsLoading(true);
    setShowEvaluation(false);
    setShowNewQuestionButton(false);

    try {
      // Fazendo a chamada para o backend (substituindo o comando curl)
      const res = await fetch('/api/ask', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: question,
          agent: 'bae',
        }),
      });
      

      // Verifica se a resposta foi bem-sucedida
      if (!res.ok) {
        throw new Error('Erro ao buscar a resposta do servidor');
      }

      const data = await res.json(); // Converte a resposta para JSON
      setResponse(data.response || 'Resposta não disponível'); // Adiciona resposta na caixa de resposta
    } catch (error) {
      console.error('Erro:', error);
      setResponse('Erro ao buscar resposta. Tente novamente.');
    } finally {
      setIsLoading(false);
      setShowEvaluation(true);
      setShowNewQuestionButton(true);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-white">
      <div className="p-8 bg-gray-100 rounded-lg shadow-lg w-full max-w-lg">
        <div className="flex items-center mb-4">
          <Image 
            src="/mascote-bae.png" 
            alt="Mascote Baê"
            width={60} 
            height={60} 
            className="mr-4"
          />
          <h1 className="text-xl font-bold text-gray-800">
            Tire sua Dúvida sobre a TGA
          </h1>
        </div>

        <textarea 
          placeholder="Qual o calendário para 2025, a escola XXXX foi premiada no Premio TGA 2024? Qual a data da próxima avaliação plurall ..."
          value={question}
          onChange={handleQuestionChange}
          className="w-full p-4 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2 h-24 resize-y" // Altura maior e quebra de texto
        />
        
        {/* Disclaimer */}
        <div className="mb-4 text-sm text-red-500 text-center">
          Todas as perguntas são registradas para curadoria e treinamento da inteligência.
        </div>

        {!isLoading && !response && (
          <button 
            onClick={handleAskQuestion}
            className="w-full p-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700">
            Perguntar
          </button>
        )}

        {isLoading && (
          <div className="mt-4 text-gray-600">
            Pensando{'.'.repeat((Math.floor(Date.now() / 1000) % 3) + 1)}
          </div>
        )}

        {!isLoading && response && (
          <div className="mt-4 p-4 bg-white rounded-lg border border-gray-300 h-48 overflow-y-auto break-words">
            {response} {/* Resposta exibida com quebra de linha */}
          </div>
        )}

        {showEvaluation && (
          <div className="mt-4 flex justify-center items-center">
            <label className="text-gray-700 mr-2">Nota:</label>
            <input 
              type="number" 
              min="1" 
              max="10" 
              value={evaluation} 
              onChange={handleEvaluateChange}
              className="w-16 p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 text-center" // Campo de avaliação pequeno e centralizado
            />
          </div>
        )}

        {showNewQuestionButton && (
          <div className="mt-4">
            <button 
              onClick={() => window.location.reload()} 
              className="w-full p-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700">
              Nova Pergunta
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
